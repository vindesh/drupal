/*  Define the used addons
==============================================================================*/
var gulp = require('gulp');
var sass = require('gulp-sass');
var sourcemaps = require('gulp-sourcemaps');
var autoprefixer = require('gulp-autoprefixer');
var minifyJS = require('gulp-uglify');
var minifyCSS = require('gulp-clean-css');
var concat = require('gulp-concat');
var rename = require('gulp-rename');
var plumber = require('gulp-plumber');
var browserSync = require('browser-sync').create();



var onError = function (err) {
  console.log(err.toString());
  this.emit('end');
};


/*  CSS
==============================================================================*/
gulp.task('styles', function() {
  return gulp.src('src/styles/**/*.scss')
    .pipe(plumber({ errorHandler: onError }))
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(minifyCSS())
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest('css'))
    .pipe(browserSync.reload({
      stream: true
    }));
});
// gulp.task('css', function() {
//   return gulp.src('scss/**/*.scss')
//     // .pipe(sourcemaps.init())
//     .pipe(sass().on('error', sass.logError))
//     .pipe(autoprefixer({
//       browsers: ['last 3 versions', 'ie >= 9'],
//       cascade: false
//     }))
//     .pipe(minifyCSS())
//     // .pipe(sourcemaps.write('./'))
//     .pipe(rename('styles-min.css'))
//     .pipe(gulp.dest('css'))
//     .pipe(browserSync.reload({
//       stream: true
//     }))
//     // .pipe(browserSync.stream({match: '**/*.css'})) // Reason: the writig of sourcemaps fucks this up :)
// });



/*  JS
==============================================================================*/
gulp.task('scripts', function() {
  return gulp.src('src/scripts/**/*.js')
    .pipe(plumber({ errorHandler: onError }))
    .pipe(sourcemaps.init())
    .pipe(minifyJS())
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest('js'))
    .pipe(browserSync.reload({
      stream: true
    }));
});
// gulp.task('js', function() {
//   return gulp.src(['rawjs/vendor/*.js', 'rawjs/**/*.js'])
//   // return gulp.src(['./lib/file3.js', './lib/file1.js', './lib/file2.js'])
//     .pipe(concat('scripts.js'))
//     .pipe(minifyJS())
//     .pipe(gulp.dest('js'))
//     .pipe(browserSync.reload({
//       stream: true
//     }))
// });



/*  IMAGES
==============================================================================*/
// gulp.taks('images', function() {
//   return gulp.src('src/images/**/*')
//     .pipe(cache(imagemin({ optimizationLevel: 5, progressive: true, interlaced: true })))
//     .pipe(gulp.dest('img'))
// });



/*  BROWSERSYNC
==============================================================================*/
gulp.task('browserSync', function() {
  browserSync.init({
    server: {
      badeDir: './'
    }
  })
});
// gulp.task('browserSync', function() {
//   browserSync.init({
//     server: {
//       baseDir: './'
//     },
//   })
// });



/*  DEFAULT TASK
==============================================================================*/
gulp.task('default', ['browserSync', 'styles', 'scripts'], function() {
  gulp.watch('src/styles/**/*.scss', ['styles']);
  gulp.watch('src/scripts/**/*.js', ['scripts']);
  // gulp.watch('src/images/**/*', ['images']);
  gulp.watch('*.html', browserSync.reload);
});
// gulp.task('default', ['browserSync','css','js'], function() {
//   gulp.watch('scss/**/*.scss', ['css']);
//   gulp.watch('*.html', browserSync.reload);
//   // gulp.watch('js/**/*.js', browserSync.reload);
//   gulp.watch('rawjs/**/*.js', ['js']);
// });



/*  PRODUCTION TASK
==============================================================================*/
// gulp.task('production', function() {

// });



// https://markgoodyear.com/2014/01/getting-started-with-gulp/
