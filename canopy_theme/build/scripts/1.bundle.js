(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./app/scripts/modules/filters/filter-toggle.main.js":
/*!***********************************************************!*\
  !*** ./app/scripts/modules/filters/filter-toggle.main.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n\nvar UIkit = __webpack_require__(/*! uikit */ \"./node_modules/uikit/dist/js/uikit.js\");\n\nvar helper = __webpack_require__(/*! ../info/helper */ \"./app/scripts/modules/info/helper.js\");\n\nvar log = helper.SettingLogLevel();\nvar logFormat_debug = 'filterToggle: Function Name: {0}, {1}::{2}';\n\nvar format = __webpack_require__(/*! string-format */ \"./node_modules/string-format/index.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function filterToggle($el) {\n    _classCallCheck(this, filterToggle);\n\n    log.debug(logFormat_debug.format('filterToggle', 'init: ', ''));\n    this.$el = $el;\n    var that = this; // get accordion target\n\n    var $toggle = that.$el;\n    var $toggleGroup = that.$el.closest('.ukg-filter-container').find('a[uk-toggle]').not(that.$el);\n    var target = that.getToggleTarget($toggle);\n    var $current_icon = $('span.ukg-toggle', $toggle);\n\n    if (target) {\n      // there's our target\n      UIkit.util.on($(target), 'show', function () {\n        // do something\n        log.debug(logFormat_debug.format('filterToggle show', 'toggle shown: ', 'change chevron from down to up'));\n        $current_icon.removeClass('icon-chevron-down').addClass('icon-chevron-up'); // Remove all other toggles in this group\n\n        if ($toggleGroup.length > 0) {\n          // Found my cousins\n          $.each($toggleGroup, function (i, v) {\n            var _target = that.getToggleTarget($(v));\n\n            if (_target) {\n              that.ToggleOff($(v));\n            }\n          });\n        }\n      });\n      UIkit.util.on($(target), 'hide', function () {\n        // do something\n        log.debug(logFormat_debug.format('filterToggle show', 'toggle hidden: ', 'change chevron from up to down'));\n        $current_icon.removeClass('icon-chevron-up').addClass('icon-chevron-down');\n      });\n    }\n  }\n\n  _createClass(filterToggle, [{\n    key: \"getToggleTarget\",\n    value: function getToggleTarget($toggle) {\n      var target = '';\n\n      var _target_attr = $toggle.attr('uk-toggle');\n\n      if (_target_attr && _target_attr.startsWith(\"target:\")) {\n        var _target = _target_attr.split(\":\").pop().trim();\n\n        if ($(_target).length > 0) {\n          target = _target;\n        }\n      }\n\n      return target;\n    }\n  }, {\n    key: \"ToggleOff\",\n    value: function ToggleOff($toggle) {\n      if ($toggle) {\n        var $icon = $('span.ukg-toggle', $toggle);\n\n        if ($icon.hasClass('icon-chevron-up')) {\n          // means this toggle is active, need to close\n          UIkit.toggle($toggle).toggle();\n          $icon.removeClass('icon-chevron-up').addClass('icon-chevron-down');\n        }\n      }\n    }\n  }]);\n\n  return filterToggle;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc2NyaXB0cy9tb2R1bGVzL2ZpbHRlcnMvZmlsdGVyLXRvZ2dsZS5tYWluLmpzPzAzZGIiXSwibmFtZXMiOlsiJCIsInJlcXVpcmUiLCJVSWtpdCIsImhlbHBlciIsImxvZyIsIlNldHRpbmdMb2dMZXZlbCIsImxvZ0Zvcm1hdF9kZWJ1ZyIsImZvcm1hdCIsIm1vZHVsZSIsImV4cG9ydHMiLCIkZWwiLCJkZWJ1ZyIsInRoYXQiLCIkdG9nZ2xlIiwiJHRvZ2dsZUdyb3VwIiwiY2xvc2VzdCIsImZpbmQiLCJub3QiLCJ0YXJnZXQiLCJnZXRUb2dnbGVUYXJnZXQiLCIkY3VycmVudF9pY29uIiwidXRpbCIsIm9uIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImxlbmd0aCIsImVhY2giLCJpIiwidiIsIl90YXJnZXQiLCJUb2dnbGVPZmYiLCJfdGFyZ2V0X2F0dHIiLCJhdHRyIiwic3RhcnRzV2l0aCIsInNwbGl0IiwicG9wIiwidHJpbSIsIiRpY29uIiwiaGFzQ2xhc3MiLCJ0b2dnbGUiXSwibWFwcGluZ3MiOiJBQUFhOzs7Ozs7OztBQUViLElBQU1BLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxvREFBRCxDQUFqQjs7QUFDQSxJQUFNQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsb0RBQUQsQ0FBckI7O0FBQ0EsSUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLDREQUFELENBQXRCOztBQUNBLElBQU1HLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxlQUFQLEVBQVo7QUFDQSxJQUFNQyxlQUFlLEdBQUcsNENBQXhCOztBQUNBLElBQU1DLE1BQU0sR0FBR04sbUJBQU8sQ0FBQyw0REFBRCxDQUF0Qjs7QUFFQU8sTUFBTSxDQUFDQyxPQUFQO0FBQ0Usd0JBQVlDLEdBQVosRUFBaUI7QUFBQTs7QUFDZk4sT0FBRyxDQUFDTyxLQUFKLENBQVVMLGVBQWUsQ0FBQ0MsTUFBaEIsQ0FBdUIsY0FBdkIsRUFBdUMsUUFBdkMsRUFBaUQsRUFBakQsQ0FB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RUFBc0IwQixNQUF0QjtBQUNBRixlQUFLLENBQUNkLFdBQU4sQ0FBa0IsaUJBQWxCLEVBQXFDQyxRQUFyQyxDQUE4QyxtQkFBOUM7QUFDRDtBQUNGO0FBQ0Y7QUF4REg7O0FBQUE7QUFBQSIsImZpbGUiOiIuL2FwcC9zY3JpcHRzL21vZHVsZXMvZmlsdGVycy9maWx0ZXItdG9nZ2xlLm1haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmNvbnN0IFVJa2l0ID0gcmVxdWlyZSgndWlraXQnKTtcbmNvbnN0IGhlbHBlciA9IHJlcXVpcmUoJy4uL2luZm8vaGVscGVyJyk7XG5jb25zdCBsb2cgPSBoZWxwZXIuU2V0dGluZ0xvZ0xldmVsKCk7XG5jb25zdCBsb2dGb3JtYXRfZGVidWcgPSAnZmlsdGVyVG9nZ2xlOiBGdW5jdGlvbiBOYW1lOiB7MH0sIHsxfTo6ezJ9JztcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJ3N0cmluZy1mb3JtYXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBmaWx0ZXJUb2dnbGUge1xuICBjb25zdHJ1Y3RvcigkZWwpIHtcbiAgICBsb2cuZGVidWcobG9nRm9ybWF0X2RlYnVnLmZvcm1hdCgnZmlsdGVyVG9nZ2xlJywgJ2luaXQ6ICcsICcnKSk7XG4gICAgdGhpcy4kZWwgPSAkZWw7XG4gICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgIC8vIGdldCBhY2NvcmRpb24gdGFyZ2V0XG4gICAgbGV0ICR0b2dnbGUgPSB0aGF0LiRlbDtcbiAgICBsZXQgJHRvZ2dsZUdyb3VwID0gdGhhdC4kZWwuY2xvc2VzdCgnLnVrZy1maWx0ZXItY29udGFpbmVyJykuZmluZCgnYVt1ay10b2dnbGVdJykubm90KHRoYXQuJGVsKTtcbiAgICBsZXQgdGFyZ2V0ID0gdGhhdC5nZXRUb2dnbGVUYXJnZXQoJHRvZ2dsZSk7XG4gICAgbGV0ICRjdXJyZW50X2ljb24gPSAkKCdzcGFuLnVrZy10b2dnbGUnLCAkdG9nZ2xlKTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAvLyB0aGVyZSdzIG91ciB0YXJnZXRcbiAgICAgIFVJa2l0LnV0aWwub24oJCh0YXJnZXQpLCAnc2hvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZG8gc29tZXRoaW5nXG4gICAgICAgIGxvZy5kZWJ1Zyhsb2dGb3JtYXRfZGVidWcuZm9ybWF0KCdmaWx0ZXJUb2dnbGUgc2hvdycsICd0b2dnbGUgc2hvd246ICcsICdjaGFuZ2UgY2hldnJvbiBmcm9tIGRvd24gdG8gdXAnKSk7XG4gICAgICAgICRjdXJyZW50X2ljb24ucmVtb3ZlQ2xhc3MoJ2ljb24tY2hldnJvbi1kb3duJykuYWRkQ2xhc3MoJ2ljb24tY2hldnJvbi11cCcpO1xuICAgICAgICAvLyBSZW1vdmUgYWxsIG90aGVyIHRvZ2dsZXMgaW4gdGhpcyBncm91cFxuICAgICAgICBpZiAoJHRvZ2dsZUdyb3VwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBGb3VuZCBteSBjb3VzaW5zXG4gICAgICAgICAgJC5lYWNoKCR0b2dnbGVHcm91cCwgKGksIHYpID0+IHtcbiAgICAgICAgICAgIGxldCBfdGFyZ2V0ID0gdGhhdC5nZXRUb2dnbGVUYXJnZXQoJCh2KSk7XG4gICAgICAgICAgICBpZiAoX3RhcmdldCkge1xuICAgICAgICAgICAgICB0aGF0LlRvZ2dsZU9mZigkKHYpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVUlraXQudXRpbC5vbigkKHRhcmdldCksICdoaWRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBkbyBzb21ldGhpbmdcbiAgICAgICAgbG9nLmRlYnVnKGxvZ0Zvcm1hdF9kZWJ1Zy5mb3JtYXQoJ2ZpbHRlclRvZ2dsZSBzaG93JywgJ3RvZ2dsZSBoaWRkZW46ICcsICdjaGFuZ2UgY2hldnJvbiBmcm9tIHVwIHRvIGRvd24nKSk7XG4gICAgICAgICRjdXJyZW50X2ljb24ucmVtb3ZlQ2xhc3MoJ2ljb24tY2hldnJvbi11cCcpLmFkZENsYXNzKCdpY29uLWNoZXZyb24tZG93bicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0VG9nZ2xlVGFyZ2V0KCR0b2dnbGUpIHtcbiAgICBsZXQgdGFyZ2V0ID0gJyc7XG4gICAgbGV0IF90YXJnZXRfYXR0ciA9ICR0b2dnbGUuYXR0cigndWstdG9nZ2xlJyk7XG4gICAgaWYgKF90YXJnZXRfYXR0ciAmJiBfdGFyZ2V0X2F0dHIuc3RhcnRzV2l0aChcInRhcmdldDpcIikpIHtcbiAgICAgIGxldCBfdGFyZ2V0ID0gX3RhcmdldF9hdHRyLnNwbGl0KFwiOlwiKS5wb3AoKS50cmltKCk7XG4gICAgICBpZiAoJChfdGFyZ2V0KS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRhcmdldCA9IF90YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBUb2dnbGVPZmYoJHRvZ2dsZSkge1xuICAgIGlmICgkdG9nZ2xlKSB7XG4gICAgICBsZXQgJGljb24gPSAkKCdzcGFuLnVrZy10b2dnbGUnLCAkdG9nZ2xlKTtcbiAgICAgIGlmICgkaWNvbi5oYXNDbGFzcygnaWNvbi1jaGV2cm9uLXVwJykpIHtcbiAgICAgICAgLy8gbWVhbnMgdGhpcyB0b2dnbGUgaXMgYWN0aXZlLCBuZWVkIHRvIGNsb3NlXG4gICAgICAgIFVJa2l0LnRvZ2dsZSgkdG9nZ2xlKS50b2dnbGUoKTtcbiAgICAgICAgJGljb24ucmVtb3ZlQ2xhc3MoJ2ljb24tY2hldnJvbi11cCcpLmFkZENsYXNzKCdpY29uLWNoZXZyb24tZG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/scripts/modules/filters/filter-toggle.main.js\n");

/***/ })

}]);